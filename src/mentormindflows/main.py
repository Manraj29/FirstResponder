#!/usr/bin/env python
import os
from typing import Any, Dict, Optional
from pydantic import BaseModel
from datetime import datetime
from uuid import uuid4

from crewai.flow import Flow, start, listen
from mentormindflows.crews.main_crew.fire_crew import FireCrew
from mentormindflows.crews.main_crew.medical_crew import MedicalCrew
from mentormindflows.crews.main_crew.police_crew import PoliceCrew
from mentormindflows.crews.main_crew.accident_crew import AccidentCrew
from mentormindflows.tools.csv_logger_tool import CSVLoggerTool
from mentormindflows.crews.gmailcrew.tools.gmail_tool import GmailTool

# Load Gmail Tool for emailing authorities
gmail_tool = GmailTool()
csv_tool = CSVLoggerTool()

# Define the Flow State Model
class FireResponderState(BaseModel):
    user_input: Optional[str] = None
    username: Optional[str] = None
    location: Optional[str] = None
    severity: Optional[str] = None
    incident_data: Optional[Dict[str, Any]] = None
    crew_result: Optional[str] = None
    final_report: Optional[str] = None


# Define the FireResponder Flow
class FireResponderFlow(Flow[FireResponderState]):

    @start()
    def get_user_input(self):
        print("🚨 First Incident Responder 🚨\n")
        if not self.state.username:
            self.state.username = os.getenv("FIRE_USERNAME") or input("Enter your name: ")
        if not self.state.user_input:
            self.state.user_input = os.getenv("FIRE_DESCRIPTION") or input("Describe the incident: ")

    @listen(get_user_input)
    def gather_details_and_trigger(self):
        print("📝 Gathering more details...")
        if not self.state.location:
            self.state.location = os.getenv("FIRE_LOCATION") or input("Enter your location: ")
        if not self.state.severity:
            self.state.severity = os.getenv("FIRE_SEVERITY") or input("Enter severity (low / medium / high): ")

        # Prepare structured incident data
        self.state.incident_data = {
            "id": str(uuid4())[:8],
            "username": self.state.username,
            "location": self.state.location,
            "category_incident": "fire",
            "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "severity": self.state.severity,
            "issue_msg": self.state.user_input,
        }

        # Trigger FireCrew
        fire_crew = FireCrew()
        print("🚒 Dispatching Fire Crew...")
        result = fire_crew.crew().kickoff(inputs=self.state.incident_data)
        self.state.crew_result = str(result.raw)

    @listen(gather_details_and_trigger)
    def save_final_report(self):
        print("🧾 Saving final incident report...")
        report_content = f"""
# 🔥 Fire Incident Report

**Incident ID:** {self.state.incident_data['id']}
**Reported By:** {self.state.username}
**Location:** {self.state.location}
**Severity:** {self.state.severity}
**Time:** {self.state.incident_data['time']}
**Description:** {self.state.user_input}

---

Report generated by FireResponder AI Crew.
"""
        # Save to file
        output_dir = os.path.join(os.path.dirname(__file__), "../outputs")
        os.makedirs(output_dir, exist_ok=True)
        report_path = os.path.join(output_dir, "fire_report.md")

        with open(report_path, "w", encoding="utf-8") as f:
            f.write(report_content)

        self.state.final_report = report_path
        print(f"✅ Report saved at {report_path}")

    @listen(save_final_report)
    def email_authority(self):
        print("📧 Sending email to authority (simulated)...")

        with open(self.state.final_report, "r", encoding="utf-8") as f:
            email_body = f.read()

        result = gmail_tool._run(
            touser="d2021.piyush.chugeja@ves.ac.in",
            body=email_body
        )
        print("📨 Email sent!", result)


# Entrypoint functions
def kickoff():
    fire_flow = FireResponderFlow()
    fire_flow.kickoff()

def plot():
    fire_flow = FireResponderFlow()
    fire_flow.plot()

# Helper for programmatic runs (e.g., Streamlit)
def run_fire_flow(
    username: str,
    description: str,
    location: str,
    severity: str,
) -> str:
    fire_flow = FireResponderFlow()
    fire_flow.state.username = username
    fire_flow.state.user_input = description
    fire_flow.state.location = location
    fire_flow.state.severity = severity
    fire_flow.kickoff()
    return fire_flow.state.final_report or ""

# Generic helper to route to the appropriate crew and generate report
def run_incident_flow(
    category: str,
    username: str,
    description: str,
    location: str,
    severity: str,
    image_path: str | None = None,
) -> str:
    category_norm = (category or "").strip().lower()

    incident_data = {
        "id": str(uuid4())[:8],
        "username": username,
        "location": location,
        "category_incident": category_norm or "other",
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "severity": severity,
        "issue_msg": description,
    }

    crew_cls = {
        "fire": FireCrew,
        "medical": MedicalCrew,
        "police": PoliceCrew,
        "accident": AccidentCrew,
    }.get(category_norm, FireCrew)

    result = crew_cls().crew().kickoff(inputs=incident_data)
    crew_result_text = str(getattr(result, "raw", result))

    report_content = f"""
# Incident Report ({incident_data['category_incident'].title()})

**Incident ID:** {incident_data['id']}
**Reported By:** {incident_data['username']}
**Location:** {incident_data['location']}
**Severity:** {incident_data['severity']}
**Time:** {incident_data['time']}

---

## User Description
{incident_data['issue_msg']}

{f'Attached Image: {image_path}' if image_path else ''}

---


Report generated by Incident Responder AI Crew.
"""

    output_dir = os.path.join(os.path.dirname(__file__), "../outputs")
    os.makedirs(output_dir, exist_ok=True)
    report_path = os.path.join(output_dir, "report.md")
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(report_content)

    # Optionally email the report
    try:
        email_body = report_content
        _ = gmail_tool._run(touser="authority@emergency.gov", body=email_body)
    except Exception:
        pass

    return report_path








if __name__ == "__main__":
    kickoff()
